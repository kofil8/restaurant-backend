generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//enum//
enum UserRole {
  SUPER_ADMIN
  ADMIN
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  COMPLETED
  CANCELLED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum Status {
  ACTIVE
  INACTIVE
}

// MODEL//
model User {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  email        String  @unique
  password     String
  name         String
  phoneNumber  String?
  profileImage String?

  isVerified Boolean @default(false)
  isOnline   Boolean @default(false)

  status Status @default(ACTIVE)

  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  Otp            Otp[]
  orders         Order[]
  reservations   Reservation[]
  reviews        Review[]
  ratees         Rating[]       @relation("Ratee")
  raters         Rating[]       @relation("Rater")
  conversations1 Conversation[] @relation("User1Conversations")
  conversations2 Conversation[] @relation("User2Conversations")
  Conversation   Conversation[]
  message        Message[]      @relation("UserMessages")

  @@map("users")
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  otp       Int
  hexCode   String?
  expiry    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId

  @@map("otps")
}

model Conversation {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  user1Id   String    @db.ObjectId
  user2Id   String    @db.ObjectId
  messages  Message[] @relation("ConversationMessages")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  user1 User @relation("User1Conversations", fields: [user1Id], references: [id])
  user2 User @relation("User2Conversations", fields: [user2Id], references: [id])

  userId String? @db.ObjectId
  User   User?   @relation(fields: [userId], references: [id])

  @@map("conversations")
}

model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  senderId       String   @db.ObjectId
  receiverId     String   @db.ObjectId
  content        String
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  sender       User         @relation("UserMessages", fields: [senderId], references: [id])
  conversation Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])

  @@map("messages")
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  raterId   String   @db.ObjectId
  rater     User     @relation("Rater", fields: [raterId], references: [id])
  rateeId   String   @db.ObjectId
  ratee     User     @relation("Ratee", fields: [rateeId], references: [id])
  score     Float
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([raterId, rateeId])
  @@map("ratings")
}

model MenuItem {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  image       String?
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String      @db.ObjectId
  isFeatured  Boolean     @default(false)
  isAvailable Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  reviews     Review[]
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  description String?
  menuItems   MenuItem[]
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @db.ObjectId
  items     OrderItem[]
  total     Float
  status    OrderStatus @default(PENDING)
  tableId   String?     @db.ObjectId
  table     Table?      @relation(fields: [tableId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String   @db.ObjectId
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String   @db.ObjectId
  quantity   Int
  price      Float
}

model Table {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  number       Int           @unique
  capacity     Int
  isAvailable  Boolean       @default(true)
  orders       Order[]
  reservations Reservation[]
}

model Reservation {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  user       User              @relation(fields: [userId], references: [id])
  userId     String            @db.ObjectId
  table      Table             @relation(fields: [tableId], references: [id])
  tableId    String            @db.ObjectId
  date       DateTime
  duration   Int               @default(60)
  guestCount Int
  status     ReservationStatus @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String   @db.ObjectId
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Promotion {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  discount    Float
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
